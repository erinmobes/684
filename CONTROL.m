clear all
clc

addpath c:\dynare\4.4.3\matlab %Indicate the version of Dynare to be used

%1.
dynare RBCDynare %run the Dynare code

%2.
NN = length(K_xi); %establish the length of the IRF
K_xiCORRECT = [ 0; K_xi(1:NN-1,1) ]; %establish that the first element of
%of the vecor must be 0 since capital can't jump on impact of the shock and
%then sum the subsequent elements of the IRF except for the last one since
%we only want to have 80 periods.

figure1 = figure; %creat a figure
plot(K_xiCORRECT); %say what goes in the figure
title('Correct Capital IRF'); %give the figure a name
axis([-inf inf -inf inf]); %establish limits of x axis (first 2 elements)
%and limits of y axis (second 2 elements)
xlabel('Periods After the Shock'); %give title to x axis
ylabel('Deviations from Steady State (Levels)'); %give title to y axis

%3
%Remember that Matlab saves the steady states generated by Dynare
%in oo_ -> dr -> ys
ss = oo_.dr.ys; %generate a vector with all the steady state values and 
%then give them names (remember that the steady state values are saved in
%the same order that they appear in the Matlab command window after Dynare
%runs
Css = ss(1,1);
Hss = ss(2,1);
Kss = ss(3,1);
Ass = ss(4,1);
Yss = ss(5,1);

%4.
%In order to obtain log changes with respect to steady state the first we
%need to add to the corresponding IRF that Matlab generated its steady
%state.  Remember that what Dynare generates as IRFs are deviations in
%level terms from steady state.  Thus, focusing on consumption, the
%"complete" IRF is:
C_xiCOMPLETE = C_xi + Css;
%Now we generate the IRF as log deviations from steady state
C_xiLOG = log(C_xiCOMPLETE) - log(Css);
%Now we make the corresponding graph
figure2 = figure; %create the figure
plot(100*C_xiLOG); %say what goes into the graph: we multiply the log changes
%by 100 so that the result can be interpreted as percent deviations from 
%steady state
title('Consumption IRF'); %graph title
axis([-inf inf -inf inf]); %establish axis limits as above
xlabel('Periods After Shock'); %x axis title
ylabel('Deviation from SS (Percent)'); %y axis title

%5.
I = Y - C - G;

%6.
lambda = 1600; %creat a matrix equal to the smoothing parameter for the HP
%filter code and then generate cyclical components
Yc = log(Y) - hpfil(log(Y),lambda);
Cc = log(C) - hpfil(log(C),lambda);
Ic = log(I) - hpfil(log(I),lambda);
Hc = log(H) - hpfil(log(H),lambda);

%7.
figure3 = figure; %create a new figure

subplot(2,2,1); %we'll put in 4 graphs in 1 figure; to do so we use the
%command subplot.  The first two numbers in subplot indicate the size of
%the "matrix" of this figure, so in this case we're going to have 2
%subplots columns and 2 subplot rows; the last number in the subplot
%command indicates what position the subplot is in the figure.
plot(Yc);
axis([-inf inf -inf inf]);
ylabel('Output');
xlabel('Quarter');

subplot(2,2,2)
plot(Cc);
axis([-inf inf -inf inf]);
ylabel('Consumption');
xlabel('Quarter');

subplot(2,2,3)
plot(Ic);
axis([-inf inf -inf inf]);
ylabel('Investment');
xlabel('Quarter');

subplot(2,2,4)
plot(Hc);
axis([-inf inf -inf inf]);
ylabel('Hours');
xlabel('Quarter');

%8.
%We'll have to put two things in the same figure, so we first need to
%create a vector that will serve as a common axis.
  
NN = length(Y);
Index = 1:1:NN; %this is a row vector in increments of 1
Index = Index';

figure4 = figure;
plot(Index,log(Y),'.-',Index,hpfil(log(Y),lambda)); %the order is "(x,y)"
%and we distinguis log(Y) using the "marker".-
legend('Y','Trend'); %this indicates which variables is which, and must
%be entered in the same order as in the plot command
axis([-inf inf -inf inf]);
xlabel('Quarter')
ylabel('logY y and Trend logY')

%9. 
%std is the standard deviation function, corr is the correlation function.
%First we create autocorrelations of the variables; the command autocorr(x)
%creates a graph of the autocorrelation function (AF) of a univariate
%stochastic time series and also incorporates confidence bands.
AF_Yc = autocorr(Yc);
AF_Cc = autocorr(Cc);
AF_Ic = autocorr(Ic);
AF_Hc = autocorr(Hc);
%Then, we can refer to the AF graph to choose the autocorrelation that we
%want.  In our case, we want the one lag autocorrelation so we'll obtain
%this by choosing the element (2,1) of the graph

Table1 = [ std(Yc) std(Cc) std(Ic) std(Hc);...
    corr(Yc,Yc) corr(Cc,Yc) corr(Ic,Yc) corr(Hc,Yc);...
    AF_Yc(2,1) AF_Cc(2,1) AF_Ic(2,1) AF_Hc(2,1) ];
Table1

%10.
%We'll use my homemade function QUARTERLYtoYEAR to aggregate the quarterly
%series to annual frequency and we'll graph them
Yannual = QUARTERLYtoYEAR(Y);
Cannual = QUARTERLYtoYEAR(C);
Iannual = QUARTERLYtoYEAR(I);
Hannual = QUARTERLYtoYEAR(H);

figure5 = figure; %create a new figure

subplot(2,2,1); 
plot(Yannual);
axis([-inf inf -inf inf]);
ylabel('Output');
xlabel('Year');

subplot(2,2,2)
plot(Cannual);
axis([-inf inf -inf inf]);
ylabel('Consumptoin');
xlabel('Year');

subplot(2,2,3)
plot(Iannual);
axis([-inf inf -inf inf]);
ylabel('Investment');
xlabel('Year');

subplot(2,2,4)
plot(Hannual);
axis([-inf inf -inf inf]);
ylabel('Hours');
xlabel('Year');